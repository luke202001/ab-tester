"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const LRU = require("lru-cache");
const path_1 = require("path");
const ReadWriteLock = require("rwlock");
class LRUDiskCache {
    constructor(cachePath, options, readFile = fs_extra_1.readJSON, writeFile = fs_extra_1.outputJSON) {
        this.cachePath = cachePath;
        this.readFile = readFile;
        this.writeFile = writeFile;
        this.hits = 0;
        this.total = 0;
        this.has = (key) => this.lruStorage.has(key);
        this.getStats = (name = 'disk-lru-cache') => {
            const stats = {
                disposedItems: this.disposed,
                hitRate: this.total > 0 ? this.hits / this.total : undefined,
                hits: this.hits,
                itemCount: this.lruStorage.itemCount,
                length: this.lruStorage.length,
                max: this.lruStorage.max,
                name,
                total: this.total,
            };
            this.hits = 0;
            this.total = 0;
            this.disposed = 0;
            return stats;
        };
        this.get = (key) => __awaiter(this, void 0, void 0, function* () {
            const timeOfDeath = this.lruStorage.get(key);
            this.total += 1;
            if (timeOfDeath === undefined) {
                // if it is an outdated file when stale=false
                if (this.keyToBeDeleted) {
                    yield this.deleteFile(key);
                }
                return undefined;
            }
            const pathKey = this.getPathKey(key);
            const data = yield new Promise(resolve => {
                this.lock.readLock(key, (release) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const fileData = yield this.readFile(pathKey);
                        release();
                        this.hits += 1;
                        resolve(fileData);
                    }
                    catch (e) {
                        release();
                        resolve(undefined);
                    }
                }));
            });
            // if it is an outdated file when stale=true
            if (timeOfDeath < Date.now()) {
                this.lruStorage.del(key);
                yield this.deleteFile(key);
            }
            return data;
        });
        this.set = (key, value, maxAge) => __awaiter(this, void 0, void 0, function* () {
            let timeOfDeath = NaN;
            if (maxAge) {
                timeOfDeath = maxAge + Date.now();
                this.lruStorage.set(key, timeOfDeath, maxAge);
            }
            else {
                this.lruStorage.set(key, NaN);
            }
            if (this.keyToBeDeleted && this.keyToBeDeleted !== key) {
                yield this.deleteFile(this.keyToBeDeleted);
            }
            const pathKey = this.getPathKey(key);
            const failure = yield new Promise(resolve => {
                this.lock.writeLock(key, (release) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const writePromise = yield this.writeFile(pathKey, value);
                        release();
                        resolve(writePromise);
                    }
                    catch (e) {
                        release();
                        resolve(true);
                    }
                }));
            });
            return !failure;
        });
        this.getPathKey = (key) => {
            return path_1.join(this.cachePath, key);
        };
        this.deleteFile = (key) => __awaiter(this, void 0, void 0, function* () {
            const pathKey = this.getPathKey(key);
            this.keyToBeDeleted = '';
            const failure = new Promise(resolve => {
                this.lock.writeLock(key, (release) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        const removePromise = yield fs_extra_1.remove(pathKey);
                        release();
                        resolve(removePromise);
                    }
                    catch (e) {
                        release();
                        resolve(true);
                    }
                }));
            });
            return !failure;
        });
        this.hits = 0;
        this.total = 0;
        this.disposed = 0;
        this.keyToBeDeleted = '';
        this.lock = new ReadWriteLock();
        const dispose = (key) => {
            this.keyToBeDeleted = key;
            this.disposed += 1;
        };
        this.lruStorage = new LRU(Object.assign({}, options, { dispose }));
    }
}
exports.LRUDiskCache = LRUDiskCache;
