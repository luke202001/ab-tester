"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const LRU = require("lru-cache");
const MultilayeredCache_1 = require("./MultilayeredCache");
class LRUCache {
    constructor(options) {
        this.get = (key) => {
            const value = this.storage.get(key);
            if (this.storage.has(key)) {
                this.hits += 1;
            }
            this.total += 1;
            return value;
        };
        this.getOrSet = (key, fetcher) => __awaiter(this, void 0, void 0, function* () { return this.multilayer.get(key, fetcher); });
        this.set = (key, value, maxAge) => this.storage.set(key, value, maxAge);
        this.has = (key) => this.storage.has(key);
        this.getStats = (name = 'lru-cache') => {
            const stats = {
                disposedItems: this.disposed,
                hitRate: this.total > 0 ? this.hits / this.total : undefined,
                hits: this.hits,
                itemCount: this.storage.itemCount,
                length: this.storage.length,
                max: this.storage.max,
                name,
                total: this.total,
            };
            this.hits = 0;
            this.total = 0;
            this.disposed = 0;
            return stats;
        };
        this.hits = 0;
        this.total = 0;
        this.disposed = 0;
        this.storage = new LRU(Object.assign({}, options, { dispose: () => this.disposed += 1 }));
        this.multilayer = new MultilayeredCache_1.MultilayeredCache([this]);
    }
}
exports.LRUCache = LRUCache;
