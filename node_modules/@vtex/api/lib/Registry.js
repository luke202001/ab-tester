"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const archiver = require("archiver");
const tar_fs_1 = require("tar-fs");
const zlib_1 = require("zlib");
const constants_1 = require("./constants");
const HttpClient_1 = require("./HttpClient");
const IODataSource_1 = require("./IODataSource");
const EMPTY_OBJECT = {};
const routes = {
    App: (app) => `${routes.Registry}/${app}`,
    AppBundle: (app, version, path) => `${routes.AppVersion(app, version)}/bundle/${path}`,
    AppFile: (app, version, path) => `${routes.AppFiles(app, version)}/${path}`,
    AppFiles: (app, version) => `${routes.AppVersion(app, version)}/files`,
    AppVersion: (app, version) => `${routes.App(app)}/${version}`,
    Publish: '/v2/registry',
    Registry: '/registry',
};
const forWorkspaceMaster = ({ service, context, options }) => (service && context)
    ? HttpClient_1.HttpClient.forWorkspace(service, Object.assign({}, context, { workspace: constants_1.DEFAULT_WORKSPACE }), options || {})
    : undefined;
class Registry extends IODataSource_1.IODataSource {
    constructor() {
        super(...arguments);
        this.httpClientFactory = forWorkspaceMaster;
        this.service = 'apps';
        this.publishApp = (files, tag, { zlib } = {}) => __awaiter(this, void 0, void 0, function* () {
            if (!(files[0] && files[0].path && files[0].content)) {
                throw new Error('Argument files must be an array of {path, content}, where content can be a String, a Buffer or a ReadableStream.');
            }
            const indexOfManifest = files.findIndex(({ path }) => path === 'manifest.json');
            if (indexOfManifest === -1) {
                throw new Error('No manifest.json file found in files.');
            }
            const zip = archiver('zip', { zlib });
            // Throw stream errors so they reject the promise chain.
            zip.on('error', (e) => {
                throw e;
            });
            const request = this.http.post(routes.Publish, zip, {
                headers: { 'Content-Type': 'application/zip' },
                params: tag ? { tag } : EMPTY_OBJECT,
            });
            files.forEach(({ content, path }) => zip.append(content, { name: path }));
            const finalize = zip.finalize();
            try {
                const [response] = yield Promise.all([request, finalize]);
                response.bundleSize = zip.pointer();
                return response;
            }
            catch (e) {
                e.bundleSize = zip.pointer();
                throw e;
            }
        });
        this.listApps = () => {
            return this.http.get(routes.Registry);
        };
        this.listVersionsByApp = (app) => {
            return this.http.get(routes.App(app));
        };
        this.deprecateApp = (app, version) => {
            return this.http.patch(routes.AppVersion(app, version), { deprecated: true });
        };
        this.getAppManifest = (app, version, opts) => {
            return this.http.get(routes.AppVersion(app, version), { params: opts });
        };
        this.listAppFiles = (app, version, opts) => {
            return this.http.get(routes.AppFiles(app, version), { params: opts });
        };
        this.getAppFile = (app, version, path) => {
            return this.http.getBuffer(routes.AppFile(app, version, path));
        };
        this.getAppFileStream = (app, version, path) => {
            return this.http.getStream(routes.AppFile(app, version, path));
        };
        this.getAppBundle = (app, version, bundlePath, generatePackageJson) => {
            const params = generatePackageJson && { _packageJSONEngine: 'npm', _packageJSONFilter: 'vtex.render-builder@x' };
            return this.http.getStream(routes.AppBundle(app, version, bundlePath), {
                headers: {
                    Accept: 'application/x-gzip',
                    'Accept-Encoding': 'gzip',
                },
                params,
            });
        };
        this.unpackAppBundle = (app, version, bundlePath, unpackPath, generatePackageJson) => {
            return this.getAppBundle(app, version, bundlePath, generatePackageJson)
                .then(stream => stream
                .pipe(zlib_1.createGunzip())
                .pipe(tar_fs_1.extract(unpackPath)));
        };
    }
}
exports.Registry = Registry;
