"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HttpClient_1 = require("./HttpClient");
const routes = {
    AvailableIoVersions: '/_io',
    AvailableServiceVersions: (service) => `${routes.AvailableServices}/${service}`,
    AvailableServices: '/_services',
    InstalledIoVersion: (account, workspace) => `/${account}/${workspace}/io`,
    InstalledService: (account, workspace, name) => `/${routes.InstalledServices(account, workspace)}/services/${name}`,
    InstalledServices: (account, workspace) => `/${account}/${workspace}/services`,
};
class Router {
    constructor(ioContext, opts = {}) {
        this.listAvailableIoVersions = () => {
            return this.http.get(routes.AvailableIoVersions);
        };
        this.getInstalledIoVersion = () => {
            if (!this.account || !this.workspace) {
                throw new Error('Missing client parameters: {account, workspace}');
            }
            return this.http.get(routes.InstalledIoVersion(this.account, this.workspace));
        };
        this.installIo = (version) => {
            if (!this.account || !this.workspace) {
                throw new Error('Missing client parameters: {account, workspace}');
            }
            return this.http.put(routes.InstalledIoVersion(this.account, this.workspace), { version });
        };
        this.listAvailableServices = () => {
            return this.http.get(routes.AvailableServices);
        };
        this.getAvailableVersions = (name) => {
            return this.http.get(routes.AvailableServiceVersions(name));
        };
        this.listInstalledServices = () => {
            if (!this.account || !this.workspace) {
                throw new Error('Missing client parameters: {account, workspace}');
            }
            return this.http.get(routes.InstalledServices(this.account, this.workspace));
        };
        this.installService = (name, version) => {
            if (!this.account || !this.workspace) {
                throw new Error('Missing client parameters: {account, workspace}');
            }
            return this.http.post(routes.InstalledServices(this.account, this.workspace), { name, version });
        };
        this.account = ioContext.account;
        this.workspace = ioContext.workspace;
        this.http = HttpClient_1.HttpClient.forRoot('router', ioContext, opts);
    }
}
exports.Router = Router;
