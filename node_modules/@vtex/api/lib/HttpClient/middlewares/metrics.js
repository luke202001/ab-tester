"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const statusLabel = (status) => `${Math.floor(status / 100)}xx`;
exports.metricsMiddleware = (metrics) => {
    return (ctx, next) => __awaiter(this, void 0, void 0, function* () {
        const start = ctx.config.metric && process.hrtime();
        const production = ctx.config.production || false;
        let status;
        try {
            yield next();
            if (ctx.response && ctx.response.status && ctx.config.metric) {
                status = statusLabel(ctx.response.status);
            }
        }
        catch (err) {
            if (err.response && err.response.status && ctx.config.metric) {
                status = statusLabel(err.response.status);
            }
            else if (err.code === 'ECONNABORTED') {
                status = 'timeout';
            }
            else {
                status = 'error';
            }
            throw err;
        }
        finally {
            if (ctx.config.metric) {
                metrics.batchHrTimeMetric(`http-client-${ctx.config.metric}-${status}`, start, production);
            }
        }
    });
};
