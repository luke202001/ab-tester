"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const cacheKey = (config) => {
    const { baseURL = '', url = '', params } = config;
    const fullURL = [baseURL, url].filter(str => str).join('/');
    const urlObject = new url_1.URL(fullURL);
    const searchParams = new url_1.URLSearchParams(params);
    urlObject.search = searchParams.toString();
    return urlObject.toString();
};
const parseCacheHeaders = (headers) => {
    const { 'cache-control': cacheControl = '', etag, age: ageStr } = headers;
    const cacheDirectives = cacheControl.split(',').map(d => d.trim());
    const maxAgeDirective = cacheDirectives.find(d => d.startsWith('max-age'));
    const [, maxAgeStr] = maxAgeDirective ? maxAgeDirective.split('=') : [null, null];
    const maxAge = maxAgeStr ? parseInt(maxAgeStr, 10) : 0;
    const age = ageStr ? parseInt(ageStr, 10) : 0;
    return {
        age,
        etag,
        maxAge,
        noCache: cacheDirectives.indexOf('no-cache') !== -1,
        noStore: cacheDirectives.indexOf('no-store') !== -1,
    };
};
function isCacheable(arg) {
    return arg && arg.cacheable;
}
const addNotModified = (validateStatus) => (status) => validateStatus(status) || status === 304;
exports.cacheMiddleware = ({ cacheStorage, segmentToken }) => {
    return (ctx, next) => __awaiter(this, void 0, void 0, function* () {
        if (!isCacheable(ctx.config)) {
            return yield next();
        }
        const key = cacheKey(ctx.config);
        const keyWithSegment = key + segmentToken;
        const cacheHasWithSegment = yield cacheStorage.has(keyWithSegment);
        const cached = cacheHasWithSegment ? yield cacheStorage.get(keyWithSegment) : yield cacheStorage.get(key);
        if (cached) {
            const { etag: cachedEtag, response, expiration } = cached;
            if (expiration > Date.now() && response) {
                ctx.response = response;
                return;
            }
            const validateStatus = addNotModified(ctx.config.validateStatus);
            if (cachedEtag && validateStatus(response.status)) {
                ctx.config.headers['if-none-match'] = cachedEtag;
                ctx.config.validateStatus = validateStatus;
            }
        }
        yield next();
        if (!ctx.response) {
            return;
        }
        const revalidated = ctx.response.status === 304;
        if (revalidated && cached) {
            ctx.response = cached.response;
        }
        const { data, headers, status } = ctx.response;
        const { age, etag, maxAge, noStore } = parseCacheHeaders(headers);
        if (noStore && !etag) {
            return;
        }
        if (maxAge || etag) {
            const currentAge = revalidated ? 0 : age;
            const varySegment = ctx.response.headers.vary.includes('x-vtex-segment');
            const setKey = varySegment ? keyWithSegment : key;
            yield cacheStorage.set(setKey, {
                etag,
                expiration: Date.now() + (maxAge - currentAge) * 1000,
                response: { data, headers, status },
            });
            return;
        }
    });
};
