"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const retry = require("axios-retry");
const http_1 = require("http");
const http = axios_1.default.create({
    httpAgent: new http_1.Agent({
        keepAlive: true,
        maxFreeSockets: 50,
    }),
});
retry(http);
http.interceptors.response.use(response => response, (err) => {
    try {
        delete err.response.request;
        delete err.response.config;
        delete err.config.res;
        delete err.config.data;
    }
    catch (e) { } // tslint:disable-line
    return Promise.reject(err);
});
exports.defaultsMiddleware = (baseURL, headers, timeout) => {
    return (ctx, next) => __awaiter(this, void 0, void 0, function* () {
        ctx.config = Object.assign({ baseURL, maxRedirects: 0, timeout, validateStatus: status => (status >= 200 && status < 300) }, ctx.config, { headers: Object.assign({}, headers, ctx.config.headers) });
        yield next();
    });
};
exports.requestMiddleware = (ctx, next) => __awaiter(this, void 0, void 0, function* () {
    ctx.response = yield http.request(ctx.config);
});
