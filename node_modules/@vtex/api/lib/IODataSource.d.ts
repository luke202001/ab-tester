import { DataSource, DataSourceConfig } from 'apollo-datasource';
import { HttpClient, InstanceOptions, IOContext, LegacyInstanceOptions, ServiceContext } from './HttpClient';
interface HttpClientFactoryOptions {
    service: string | void;
    context: IOContext | void;
    options: InstanceOptions | LegacyInstanceOptions | void;
}
export declare type HttpClientFactory = (opts: HttpClientFactoryOptions) => HttpClient | void;
export declare abstract class IODataSource extends DataSource<ServiceContext> {
    protected context?: IOContext | undefined;
    private options;
    protected abstract httpClientFactory: HttpClientFactory;
    protected service: string | void;
    private httpClient;
    private initialized;
    constructor(context?: IOContext | undefined, options?: InstanceOptions);
    initialize(config: DataSourceConfig<ServiceContext>): void;
    readonly http: HttpClient;
}
export declare const forWorkspace: HttpClientFactory;
export declare const forRoot: HttpClientFactory;
export declare const forLegacy: HttpClientFactory;
export {};
