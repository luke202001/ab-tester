"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const archiver = require("archiver");
const HttpClient_1 = require("./HttpClient");
const EMPTY_OBJECT = {};
const routes = {
    Availability: (app) => `${routes.Builder}/availability/${app}`,
    Builder: '/_v/builder/0',
    Clean: (app) => `${routes.Builder}/clean/${app}`,
    Link: (app) => `${routes.Builder}/link/${app}`,
    Publish: (app) => `${routes.Builder}/publish/${app}`,
    Relink: (app) => `${routes.Builder}/relink/${app}`,
};
class Builder {
    constructor(ioContext, opts = {}) {
        this.availability = (app, hintIndex) => __awaiter(this, void 0, void 0, function* () {
            const stickyHint = hintIndex === undefined || hintIndex === null ?
                `request:${this.account}:${this.workspace}:${app}` :
                `request:${this.account}:${this.workspace}:${app}:${hintIndex}`;
            const headers = {
                'Content-Type': 'application/json',
                'x-vtex-sticky-host': stickyHint,
            };
            const { data: { availability }, headers: { 'x-vtex-sticky-host': host }, } = yield this.http.getRaw(routes.Availability(app), { headers });
            const { hostname, score } = availability;
            return { host, hostname, score };
        });
        this.clean = (app) => {
            const headers = Object.assign({ 'Content-Type': 'application/json' }, this.stickyHost && { 'x-vtex-sticky-host': this.stickyHost });
            return this.http.post(routes.Clean(app), { headers });
        };
        this.linkApp = (app, files, zipOptions = { sticky: true }) => {
            return this.zipAndSend(routes.Link(app), app, files, zipOptions);
        };
        this.publishApp = (app, files, zipOptions = { sticky: true }) => {
            return this.zipAndSend(routes.Publish(app), app, files, zipOptions);
        };
        this.relinkApp = (app, changes) => {
            const headers = Object.assign({ 'Content-Type': 'application/json' }, this.stickyHost && { 'x-vtex-sticky-host': this.stickyHost });
            return this.http.put(routes.Relink(app), changes, { headers });
        };
        this.zipAndSend = (route, app, files, { tag, sticky, stickyHint, zlib } = {}) => __awaiter(this, void 0, void 0, function* () {
            if (!(files[0] && files[0].path && files[0].content)) {
                throw new Error('Argument files must be an array of {path, content}, where content can be a String, a Buffer or a ReadableStream.');
            }
            const indexOfManifest = files.findIndex(({ path }) => path === 'manifest.json');
            if (indexOfManifest === -1) {
                throw new Error('No manifest.json file found in files.');
            }
            const zip = archiver('zip', { zlib });
            // Throw stream errors so they reject the promise chain.
            zip.on('error', (e) => {
                throw e;
            });
            const hint = stickyHint || `request:${this.account}:${this.workspace}:${app}`;
            const request = this.http.postRaw(route, zip, {
                headers: Object.assign({ 'Content-Type': 'application/octet-stream' }, sticky && { 'x-vtex-sticky-host': this.stickyHost || hint }),
                params: tag ? { tag } : EMPTY_OBJECT,
            });
            files.forEach(({ content, path }) => zip.append(content, { name: path }));
            const finalize = zip.finalize();
            const [response] = yield Promise.all([request, finalize]);
            const { data, headers: { 'x-vtex-sticky-host': host } } = response;
            this.stickyHost = host;
            return data;
        });
        this.http = HttpClient_1.HttpClient.forWorkspace('builder-hub.vtex', ioContext, opts);
        this.account = ioContext.account;
        this.workspace = ioContext.workspace;
    }
}
exports.Builder = Builder;
