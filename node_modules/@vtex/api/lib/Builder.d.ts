/// <reference types="node" />
import { ZlibOptions } from 'zlib';
import { Change } from './Apps';
import { InstanceOptions, IOContext } from './HttpClient';
import { File } from './Registry';
export declare class Builder {
    private account;
    private workspace;
    private http;
    private stickyHost;
    constructor(ioContext: IOContext, opts?: InstanceOptions);
    availability: (app: string, hintIndex: number) => Promise<{
        host: any;
        hostname: string | undefined;
        score: number;
    }>;
    clean: (app: string) => Promise<BuildResult>;
    linkApp: (app: string, files: File[], zipOptions?: ZipOptions) => Promise<BuildResult>;
    publishApp: (app: string, files: File[], zipOptions?: ZipOptions) => Promise<BuildResult>;
    relinkApp: (app: string, changes: Change[]) => Promise<BuildResult>;
    private zipAndSend;
}
interface ZipOptions {
    sticky?: boolean;
    stickyHint?: string;
    tag?: string;
    zlib?: ZlibOptions;
}
export interface BuildResult {
    availability?: AvailabilityResponse;
    code?: string;
    message?: any;
    timeNano?: number;
}
export interface AvailabilityResponse {
    host: string | undefined;
    hostname: string | undefined;
    score: number;
}
export {};
